plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.0'
    id "org.jetbrains.dokka" version "0.9.17"
    id "com.jfrog.bintray" version "1.8.4"
    id "com.github.hierynomus.license" version "0.15.0"
    id 'maven'
    id 'maven-publish'
}

group = 'com.stehno'
version = '0.0.1'

sourceCompatibility = 8
targetCompatibility = 8

repositories {
    jcenter()
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation "org.codehaus.groovy:groovy-all:$groovyVersion"

    implementation 'org.dizitart:potassium-nitrite:3.1.0'

    implementation 'org.controlsfx:controlsfx:8.40.14'

    testImplementation 'org.hamcrest:java-hamcrest:2.0.0.0'

    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
    testImplementation 'org.junit-pioneer:junit-pioneer:0.3.0'
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
}

test {
    useJUnitPlatform()
    maxParallelForks = Runtime.runtime.availableProcessors()
}

compileKotlin {
    kotlinOptions.jvmTarget = '1.8'
}

compileTestKotlin {
    kotlinOptions.jvmTarget = '1.8'
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
}

////////////////

task sourcesJar(type: Jar) {
    description = 'Creates sources jar.'
    classifier = 'sources'
    from project.sourceSets.main.allSource
}

artifacts {
    archives jar
    archives sourcesJar
}

publishing {
    publications {
        jfxCommonPublication(MavenPublication) {
            artifact jar
            artifact sourcesJar
        }
    }
}


license {
    header = file('license_header.txt')

    ignoreFailures false

    ext.year = Calendar.instance.get(Calendar.YEAR)

    excludes(['**/*.txt', '**/*.dtd', '**/*.xml', '**/*.ent', '**/*.jks', '**/*.jpg'])
}

bintray {
    if (project.hasProperty('user') && project.hasProperty('key')) {
        user = project.property('user')
        key = project.property('key')

        publications = ['jfxCommonPublication']

        pkg {
            repo = 'stehno'
            name = 'jfx-common'
            desc = 'Some JavaFX helpers.'
            licenses = ['Apache-2.0']
            labels = ['kotlin', 'javafx']
            publicDownloadNumbers = true

            version {
                name = project.version
                vcsTag = "v${project.version}"
                gpg {
                    sign = true
                }
            }
        }
    }
}